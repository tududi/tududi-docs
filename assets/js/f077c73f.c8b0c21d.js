"use strict";(globalThis.webpackChunktududi_docs=globalThis.webpackChunktududi_docs||[]).push([[958],{8453:(e,n,d)=>{d.d(n,{R:()=>l,x:()=>t});var s=d(6540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},9461:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"guides/docker-deployment","title":"Docker Deployment","description":"Deploy Tududi using Docker for a consistent, isolated environment.","source":"@site/docs/guides/docker-deployment.md","sourceDirName":"guides","slug":"/guides/docker-deployment","permalink":"/guides/docker-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/tududi/tududi-docs/tree/master/docs/guides/docker-deployment.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1}}');var i=d(4848),a=d(8453);const l={sidebar_position:1},t="Docker Deployment",o={},r=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Using Docker Compose (Recommended)",id:"using-docker-compose-recommended",level:3},{value:"Configuration",id:"configuration",level:2},{value:"docker-compose.yml",id:"docker-composeyml",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Building the Image",id:"building-the-image",level:2},{value:"Build Locally",id:"build-locally",level:3},{value:"Custom Build",id:"custom-build",level:3},{value:"Running the Container",id:"running-the-container",level:2},{value:"Basic Run",id:"basic-run",level:3},{value:"With All Options",id:"with-all-options",level:3},{value:"Data Persistence",id:"data-persistence",level:2},{value:"Volume Mounts",id:"volume-mounts",level:3},{value:"Named Volumes",id:"named-volumes",level:3},{value:"Production Deployment",id:"production-deployment",level:2},{value:"With Reverse Proxy (nginx)",id:"with-reverse-proxy-nginx",level:3},{value:"With SSL/TLS",id:"with-ssltls",level:3},{value:"docker-compose with nginx",id:"docker-compose-with-nginx",level:3},{value:"Monitoring",id:"monitoring",level:2},{value:"Health Checks",id:"health-checks",level:3},{value:"Logs",id:"logs",level:3},{value:"Backup and Restore",id:"backup-and-restore",level:2},{value:"Backup",id:"backup",level:3},{value:"Restore",id:"restore",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Container Won&#39;t Start",id:"container-wont-start",level:3},{value:"Permission Issues",id:"permission-issues",level:3},{value:"Database Locked",id:"database-locked",level:3},{value:"Port Already in Use",id:"port-already-in-use",level:3},{value:"Updating",id:"updating",level:2},{value:"Pull Latest Changes",id:"pull-latest-changes",level:3},{value:"Automated Updates",id:"automated-updates",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"docker-deployment",children:"Docker Deployment"})}),"\n",(0,i.jsx)(n.p,{children:"Deploy Tududi using Docker for a consistent, isolated environment."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Docker (version 20.10 or higher)"}),"\n",(0,i.jsx)(n.li,{children:"Docker Compose (version 1.29 or higher)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"using-docker-compose-recommended",children:"Using Docker Compose (Recommended)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Clone the repository:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/tududi/tududi.git\ncd tududi\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Create environment file:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp .env.example .env\n# Edit .env with your configuration\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Start the containers:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Access Tududi:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:3000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\n\nservices:\n  tududi:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - SESSION_SECRET=${SESSION_SECRET}\n    volumes:\n      - ./data:/app/data\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",children:"NODE_ENV=production\nPORT=3000\nSESSION_SECRET=your-secret-key-here\nDATABASE_PATH=/app/data/tududi.db\n"})}),"\n",(0,i.jsx)(n.h2,{id:"building-the-image",children:"Building the Image"}),"\n",(0,i.jsx)(n.h3,{id:"build-locally",children:"Build Locally"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker build -t tududi:latest .\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-build",children:"Custom Build"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'FROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy application files\nCOPY . .\n\n# Build frontend\nRUN npm run build\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-container",children:"Running the Container"}),"\n",(0,i.jsx)(n.h3,{id:"basic-run",children:"Basic Run"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d \\\n  --name tududi \\\n  -p 3000:3000 \\\n  -v $(pwd)/data:/app/data \\\n  -e SESSION_SECRET=your-secret \\\n  tududi:latest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"with-all-options",children:"With All Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d \\\n  --name tududi \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v $(pwd)/data:/app/data \\\n  -v $(pwd)/uploads:/app/uploads \\\n  -e NODE_ENV=production \\\n  -e SESSION_SECRET=your-secret \\\n  -e DATABASE_PATH=/app/data/tududi.db \\\n  tududi:latest\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-persistence",children:"Data Persistence"}),"\n",(0,i.jsx)(n.h3,{id:"volume-mounts",children:"Volume Mounts"}),"\n",(0,i.jsx)(n.p,{children:"Mount directories for persistent data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"volumes:\n  - ./data:/app/data           # Database\n  - ./uploads:/app/uploads     # File uploads\n  - ./logs:/app/logs           # Application logs\n"})}),"\n",(0,i.jsx)(n.h3,{id:"named-volumes",children:"Named Volumes"}),"\n",(0,i.jsx)(n.p,{children:"Use Docker volumes for better portability:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"volumes:\n  tududi-data:\n  tududi-uploads:\n\nservices:\n  tududi:\n    volumes:\n      - tududi-data:/app/data\n      - tududi-uploads:/app/uploads\n"})}),"\n",(0,i.jsx)(n.h2,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,i.jsx)(n.h3,{id:"with-reverse-proxy-nginx",children:"With Reverse Proxy (nginx)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",children:"server {\n    listen 80;\n    server_name tududi.example.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"with-ssltls",children:"With SSL/TLS"}),"\n",(0,i.jsx)(n.p,{children:"Use Let's Encrypt with Certbot:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Certbot\nsudo apt-get install certbot python3-certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d tududi.example.com\n\n# Auto-renewal\nsudo certbot renew --dry-run\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docker-compose-with-nginx",children:"docker-compose with nginx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  tududi:\n    build: .\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - tududi-data:/app/data\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - tududi\n    restart: unless-stopped\n\nvolumes:\n  tududi-data:\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,i.jsx)(n.p,{children:"Add health check to Docker Compose:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  tududi:\n    build: .\n    healthcheck:\n      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logs",children:"Logs"}),"\n",(0,i.jsx)(n.p,{children:"View container logs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Follow logs\ndocker-compose logs -f tududi\n\n# Last 100 lines\ndocker-compose logs --tail=100 tududi\n\n# With timestamps\ndocker-compose logs -f --timestamps tududi\n"})}),"\n",(0,i.jsx)(n.h2,{id:"backup-and-restore",children:"Backup and Restore"}),"\n",(0,i.jsx)(n.h3,{id:"backup",children:"Backup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Backup database\ndocker exec tududi cp /app/data/tududi.db /app/data/backup.db\ndocker cp tududi:/app/data/backup.db ./tududi-backup-$(date +%Y%m%d).db\n\n# Backup all data\ndocker run --rm \\\n  -v tududi-data:/data \\\n  -v $(pwd):/backup \\\n  alpine tar czf /backup/tududi-data-$(date +%Y%m%d).tar.gz /data\n"})}),"\n",(0,i.jsx)(n.h3,{id:"restore",children:"Restore"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Restore database\ndocker cp ./tududi-backup.db tududi:/app/data/tududi.db\ndocker-compose restart tududi\n\n# Restore all data\ndocker run --rm \\\n  -v tududi-data:/data \\\n  -v $(pwd):/backup \\\n  alpine sh -c "cd /data && tar xzf /backup/tududi-data.tar.gz --strip 1"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"container-wont-start",children:"Container Won't Start"}),"\n",(0,i.jsx)(n.p,{children:"Check logs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose logs tududi\n"})}),"\n",(0,i.jsx)(n.h3,{id:"permission-issues",children:"Permission Issues"}),"\n",(0,i.jsx)(n.p,{children:"Fix volume permissions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo chown -R 1000:1000 ./data ./uploads\n"})}),"\n",(0,i.jsx)(n.h3,{id:"database-locked",children:"Database Locked"}),"\n",(0,i.jsx)(n.p,{children:"Stop container and check for orphaned processes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose down\nrm -f ./data/*.db-shm ./data/*.db-wal\ndocker-compose up -d\n"})}),"\n",(0,i.jsx)(n.h3,{id:"port-already-in-use",children:"Port Already in Use"}),"\n",(0,i.jsx)(n.p,{children:"Change port in docker-compose.yml:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'ports:\n  - "8080:3000"  # Use port 8080 instead\n'})}),"\n",(0,i.jsx)(n.h2,{id:"updating",children:"Updating"}),"\n",(0,i.jsx)(n.h3,{id:"pull-latest-changes",children:"Pull Latest Changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Pull latest code\ngit pull origin main\n\n# Rebuild and restart\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n"})}),"\n",(0,i.jsx)(n.h3,{id:"automated-updates",children:"Automated Updates"}),"\n",(0,i.jsx)(n.p,{children:"Create an update script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# update-tududi.sh\n\necho "Pulling latest changes..."\ngit pull origin main\n\necho "Stopping containers..."\ndocker-compose down\n\necho "Building new image..."\ndocker-compose build --no-cache\n\necho "Starting containers..."\ndocker-compose up -d\n\necho "Cleaning up old images..."\ndocker image prune -f\n\necho "Update complete!"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guides/database-setup",children:"Database Setup"})," - Configure your database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/guides/backup-restore",children:"Backup & Restore"})," - Backup strategies"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);